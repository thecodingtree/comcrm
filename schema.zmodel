generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid()) @map("_id")
  email         String       @unique
  emailVerified DateTime?
  name          String?
  image         String?
  entities      CoreEntity[]
  accounts      Account[]
  sessions      Session[]
  teams         TeamUser[]
  notes         Note[]
  creatorTasks         Task[] @relation(name: "creator")
  assigneeTasks        Task[] @relation(name: "assignee")
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  // everyone can signup, and user profile is also publicly readable
  @@allow('create,read', true)

  // only the user can update or delete their own profile
  @@allow('update,delete', auth() == this)

}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Team {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  entities  CoreEntity[] @allow('read', members?[user == auth()])
  members   TeamUser[] @allow('read', members?[user == auth()])
  invites   TeamInvite[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // can be read by space members (only if not private)
  @@allow('read', auth() != null )

  // Any logged in user can create a team
  @@allow('create', auth() != null)
}

enum TeamRole {
  OWNER
  ADMIN
  MEMBER
}

model TeamUser {
  id        Int   @id @default(autoincrement())
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  role      TeamRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([teamId, userId])

  // can be read by space members (only if not private)
  @@allow('read', team.members?[user == auth()] )

  // Only users with an invite or team admins/owners can add users
  @@allow('create', team.invites?[email == auth().email] || team.members?[user == auth() && role != "MEMBER"] || future().team.members?[user == auth() && role != "MEMBER"])

  // Only team admins/owners can delete team members
  @@allow('delete', team.members?[user == auth() && role != "MEMBER"] || auth() == user)
}

model TeamInvite {
  id        Int   @id @default(autoincrement())
  email     String
  team      Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String
  role      TeamRole
  token     String   @unique @default(uuid())
  expires   DateTime @default(dbgenerated("NOW() + interval '1 week'"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, teamId])

  // can be read by the person who was invited
  @@allow('read', (auth().email == email) || (team.members?[user == auth() && role != "MEMBER"]))

  // only team ADMINs or OWNERs can create invites
  @@allow('create', team.members?[user == auth() && role != "MEMBER"])

  // only the person who was invited can delete the invite or an admin/owner of the team
  @@allow('delete', auth().email == email || team.members?[user == auth() && role != "MEMBER"])
}

enum CoreEntityType {
  PROPERTY
  CONTACT
  COMPANY
}

model CoreEntity {
  id                String         @id @default(cuid()) @map("_id")
  type              CoreEntityType
  owner              User?          @relation(fields: [ownerId], references: [id])
  ownerId            String?
  relationshipsFrom Relationship[] @relation("RelationshipFrom")
  relationshipsTo   Relationship[] @relation("RelationshipTo")
  team             Team? @relation(fields: [teamId], references: [id])
  teamId            String?
  attributes        Attributes[]
  meta              MetaData?
  notes             Note[]
  tasks            Task[]
  private            Boolean        @default(false)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  // can be read by owner or space members (and not private)
    @@allow('read', owner == auth() || (team.members?[user == auth()] && private == false))

    // users can only create, update or delete entities for themselves
    @@allow('create, update, delete', owner == auth())
}

model Attributes {
  id        String     @id @default(cuid()) @map("_id")
  name      String
  value     String
  entity    CoreEntity @relation(fields: [entityId], references: [id], onDelete: Cascade)
  entityId  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // can be read by owner or space members (only if not private)
  @@allow('read', entity.owner == auth() || entity.team.members?[user == auth()] )

  // only the user who owns the entity can read,update,delete their own attributes
  @@allow('create,update,delete', auth() == entity.owner)
}

model MetaData {
  id           Int      @id @default(autoincrement()) @map("_id")
  name         String
  surName      String?
  image        String?
  email        String?
  phone        String?
  address      Address?
  addressId    String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  entity   CoreEntity? @relation(fields: [entityId], references: [id], onDelete: Cascade)
  entityId String?     @unique

  // can be read by owner or space members (only if not private)
  @@allow('read', entity.owner == auth() || entity.team.members?[user == auth()] )

  // only the user who owns the entity can read,update,delete their own metadata
  @@allow('create,update,delete', auth() == entity.owner)
}

model Address {
  id        Int    @id @default(autoincrement()) @map("_id")
  street    String?
  city      String?
  state     String?
  zip       String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  meta      MetaData? @relation(fields: [metaId], references: [id], onDelete: Cascade)
  metaId    Int?   @unique

  // can be read by owner or space members (only if not private)
  @@allow('read', meta.entity.owner == auth() || meta.entity.team.members?[user == auth()] )

  // only the user who owns the entity can read,update,delete their own address
  @@allow('create,update,delete', auth() == meta.entity.owner)
}

model Note {
  id        String     @id @default(cuid()) @map("_id")
  creator   User       @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId String
  content   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  entity    CoreEntity @relation(fields: [entityId], references: [id], onDelete: Cascade)
  entityId  String

  // can be read by owner or space members and team members can create notes on entities
  @@allow('create,read', entity.owner == auth() || entity.team.members?[user == auth()] )

  // only the user who owns the entity can read,update,delete their own notes
  @@allow('delete,update', auth() == entity.owner)
}

model Relationship {
  id           String           @id @default(cuid()) @map("_id")
  type         RelationshipType
  from         CoreEntity       @relation("RelationshipFrom", fields: [fromEntityId], references: [id], onDelete: Cascade)
  fromEntityId String
  to           CoreEntity       @relation("RelationshipTo", fields: [toEntityId], references: [id], onDelete: Cascade)
  toEntityId   String @allow('update', auth() == to.owner) // a user can only link to entities they own
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([fromEntityId, toEntityId])

  @@allow('read', from.owner == auth() || from.team.members?[user == auth()] )

  // only the user who owns the entity can read,update,delete their own relationships
  @@allow('create,update,delete', auth() == from.owner)
}

enum RelationshipType {
  OWNER_OF
  EMPLOYED_BY
  EMPLOYER_OF
  AGENT_FOR
  OWNED_BY
  SOLD_TO
  LEASED_TO
  LEASED_BY
  INTERESTED_IN
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

enum TaskType {
  TODO
  CALL
  EMAIL
  EVENT
  FOLLOW_UP
  OTHER
}

model Task {
  id        String   @id @default(cuid()) @map("_id")
  type      TaskType @default(TODO)
  creator   User     @relation(name: "creator", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId String
  assignee  User?    @relation(name: "assignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  assigneeId String?
  related  CoreEntity? @relation(fields: [entityId], references: [id], onDelete: SetNull)
  entityId String?
  description String
  content   String?
  startDate DateTime?
  endDate   DateTime @default(now())
  priority  TaskPriority @default(LOW)
  completed Boolean  @default(false)
  private   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // can be read by owner or space members
  @@allow('read', creator == auth() || assignee == auth() || related.owner == auth() || related.team.members?[user == auth()])

  // only the user who owns the task can read,update,delete their own tasks
  @@allow('create,update,delete', creator == auth())
}
