generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(uuid()) @map("_id")
  email         String       @unique
  emailVerified DateTime?
  name          String?
  image         String?
  entities      CoreEntity[]
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  // everyone can signup, and user profile is also publicly readable
  @@allow('create,read', true)

  // only the user can update or delete their own profile
  @@allow('update,delete', auth() == this)

}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum CoreEntityType {
  PROPERTY
  CONTACT
  COMPANY
}

model CoreEntity {
  id                String         @id @default(uuid()) @map("_id")
  type              CoreEntityType
  user              User?          @relation(fields: [userId], references: [id])
  userId            String?
  linkedEntities    CoreEntity[]   @relation("CoreEntityToCoreEntity")
  relatedEntities   CoreEntity[]   @relation("CoreEntityToCoreEntity")
  relationshipsFrom Relationship[] @relation("RelationshipFrom")
  relationshipsTo   Relationship[] @relation("RelationshipTo")
  attributes        Attributes[]
  meta              MetaData?
  notes             Note[]
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  // everyone can create a new entity
  @@allow('create', auth() != null)

  // only the user can read,update,delete their own entities
  @@allow('update,delete,read', auth() == user)
}

model Attributes {
  id        String     @id @default(uuid()) @map("_id")
  name      String
  value     String
  entity    CoreEntity @relation(fields: [entityId], references: [id], onDelete: Cascade)
  entityId  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@allow('create,update,delete,read', auth() == entity.user)
}

model MetaData {
  id           String      @id @default(uuid()) @map("_id")
  name         String
  surName      String?
  image        String?
  email        String?
  phone        String?
  address      Address?
  addressId    String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  CoreEntity   CoreEntity? @relation(fields: [CoreEntityId], references: [id], onDelete: Cascade)
  CoreEntityId String?     @unique

  // only the user who owns the entity can read,update,delete their own metadata
  @@allow('all', auth() == CoreEntity.user)
}

model Address {
  id        String    @id @default(uuid()) @map("_id")
  street    String?
  city      String?
  state     String?
  zip       String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  meta      MetaData? @relation(fields: [metaId], references: [id], onDelete: Cascade)
  metaId    String?   @unique

  // only the user who owns the entity can read,update,delete their own address
  @@allow('all', auth() == meta.CoreEntity.user)
}

model Note {
  id        String     @id @default(uuid()) @map("_id")
  content   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  entity    CoreEntity @relation(fields: [entityId], references: [id], onDelete: Cascade)
  entityId  String

  // only the user who owns the entity can read,update,delete their own notes
  @@allow('all', auth() == entity.user)
}

model Relationship {
  id           String           @id @default(uuid()) @map("_id")
  type         RelationshipType
  from         CoreEntity       @relation("RelationshipFrom", fields: [fromEntityId], references: [id], onDelete: Cascade)
  fromEntityId String
  to           CoreEntity       @relation("RelationshipTo", fields: [toEntityId], references: [id], onDelete: Cascade)
  toEntityId   String @allow('update', auth() == to.user) // a user can only link to entities they own
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([fromEntityId, toEntityId])

  // only the user who owns the entity can read,update,delete their own relationships
  @@allow('all', auth() == from.user)
}

enum RelationshipType {
  OWNER_OF
  EMPLOYED_BY
  EMPLOYER_OF
  AGENT_FOR
  OWNED_BY
  SOLD_TO
  LEASED_TO
  LEASED_BY
  INTERESTED_IN
}
