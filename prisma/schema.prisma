generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(uuid()) @map("_id")
  email         String       @unique
  emailVerified DateTime?
  name          String?
  image         String?
  entities      CoreEntity[]
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum CoreEntityType {
  PROPERTY
  CONTACT
  COMPANY
}

model CoreEntity {
  id              String         @id @default(uuid()) @map("_id")
  type            CoreEntityType
  user            User?          @relation(fields: [userId], references: [id])
  userId          String?
  linkedEntities  CoreEntity[]   @relation("CoreEntityToCoreEntity")
  relatedEntities CoreEntity[]   @relation("CoreEntityToCoreEntity")
  attributes      Attributes[]
  meta            MetaData?      @relation(fields: [metaId], references: [id])
  metaId          String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model Attributes {
  id        String     @id @default(uuid()) @map("_id")
  name      String
  value     String
  entity    CoreEntity @relation(fields: [entityId], references: [id], onDelete: Cascade)
  entityId  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model MetaData {
  id         String       @id @default(uuid()) @map("_id")
  name       String
  surName    String
  address    Address      @relation(fields: [addressId], references: [id], onDelete: Cascade)
  addressId  String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  CoreEntity CoreEntity[]
}

model Address {
  id        String     @id @default(uuid()) @map("_id")
  street    String
  city      String
  state     String
  zip       String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  meta      MetaData[]
}
