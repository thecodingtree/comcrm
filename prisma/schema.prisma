//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
    provider = "postgresql"
    url = env("POSTGRES_PRISMA_URL")
    directUrl = env("POSTGRES_URL_NON_POOLING")
}

generator client {
    provider = "prisma-client-js"
}

enum CoreEntityType {
    PROPERTY
    CONTACT
    COMPANY
}

enum RelationshipType {
    OWNER_OF
    EMPLOYED_BY
    EMPLOYER_OF
    AGENT_FOR
    OWNED_BY
    SOLD_TO
    LEASED_TO
    LEASED_BY
    INTERESTED_IN
}

model Account {
    id String @id() @default(cuid())
    userId String
    type String
    provider String
    providerAccountId String
    refresh_token String? @db.Text()
    access_token String? @db.Text()
    expires_at Int?
    token_type String?
    scope String?
    id_token String? @db.Text()
    session_state String?
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id String @id() @default(cuid())
    sessionToken String @unique()
    userId String
    expires DateTime
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// @@allow('create,read', true)
/// @@allow('update,delete', auth() == this)
model User {
    id String @id() @default(uuid()) @map("_id")
    email String @unique()
    emailVerified DateTime?
    name String?
    image String?
    entities CoreEntity[]
    accounts Account[]
    sessions Session[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
}

model VerificationToken {
    identifier String
    token String @unique()
    expires DateTime

    @@unique([identifier, token])
}

/// @@allow('create', true)
/// @@allow('update,delete,read', auth() == user)
model CoreEntity {
    id String @id() @default(uuid()) @map("_id")
    type CoreEntityType
    user User? @relation(fields: [userId], references: [id])
    userId String?
    linkedEntities CoreEntity[] @relation("CoreEntityToCoreEntity")
    relatedEntities CoreEntity[] @relation("CoreEntityToCoreEntity")
    relationshipsFrom Relationship[] @relation("RelationshipFrom")
    relationshipsTo Relationship[] @relation("RelationshipTo")
    attributes Attributes[]
    meta MetaData?
    notes Note[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
}

/// @@allow('create,update,delete,read', auth() == entity.user)
model Attributes {
    id String @id() @default(uuid()) @map("_id")
    name String
    value String
    entity CoreEntity @relation(fields: [entityId], references: [id], onDelete: Cascade)
    entityId String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
}

/// @@allow('all', auth() == CoreEntity.user)
model MetaData {
    id String @id() @default(uuid()) @map("_id")
    name String
    surName String?
    image String?
    email String?
    phone String?
    address Address?
    addressId String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    CoreEntity CoreEntity? @relation(fields: [CoreEntityId], references: [id], onDelete: Cascade)
    CoreEntityId String? @unique()
}

/// @@allow('all', auth() == meta.CoreEntity.user)
model Address {
    id String @id() @default(uuid()) @map("_id")
    street String?
    city String?
    state String?
    zip String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    meta MetaData? @relation(fields: [metaId], references: [id], onDelete: Cascade)
    metaId String? @unique()
}

/// @@allow('all', auth() == entity.user)
model Note {
    id String @id() @default(uuid()) @map("_id")
    content String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    entity CoreEntity @relation(fields: [entityId], references: [id], onDelete: Cascade)
    entityId String
}

/// @@allow('all', auth() == from.user)
model Relationship {
    id String @id() @default(uuid()) @map("_id")
    type RelationshipType
    from CoreEntity @relation("RelationshipFrom", fields: [fromEntityId], references: [id], onDelete: Cascade)
    fromEntityId String
    to CoreEntity @relation("RelationshipTo", fields: [toEntityId], references: [id], onDelete: Cascade)
    /// @allow('update', auth() == to.user)
    toEntityId String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()

    @@unique([fromEntityId, toEntityId])
}